一、作用域闭包
   作用域是什么
 1.1编译原理
  （1） 程序中的一段源代码在执行之前会经历三个步骤（编译）：
        1.考虑程序 var a = 2;。这段程序通常会被分解成 为下面这些词法单元：var、a、=、2 、;
        2.“抽象语法树”
        3.代码生成
 1.2理解作用域
   引擎/编译器/作用域
 1.2.2对话
  编译器首先会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。但是当编 译器开始进行代码生成时，它对这段程序的处理方式会和预期的有所不同
 (1)编译器会进行如下处理：
 1. 遇到 var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的 集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作 用域的集合中声明一个新的变量，并命名为 a。
 2. 接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值 操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的 变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（查看 1.3 节）
 总结：变量赋值--首先编译器在当前作用域中声明一个变量（之前没有声明过）
    --引擎在作用域链中查找该变量能找到的话对它赋值
    （前两节具体见图）
 1.2.3编辑器   




